%YAML:1.0

#common parameters
imu: 1
wheel: 1
only_initial_with_wheel: 0 #只利用wheel进行初始化，不加入因子图
plane: 1
num_of_cam: 1  # 1 or 2

imu_topic: "/sim/imu/data_noise"
wheel_topic: "/sim/wheel/data_noise"
image0_topic: "/cam0/image_raw"
image1_topic: "/cam1/image_raw"
feature0_topic: "/sim/cam0/feature_noise"
feature1_topic: "/sim/cam1/feature"
groundtruth_topic: "/sim/groundtruth"
output_path: "/home/td/slam/vins_fusion_ws/src/VINS-Fusion/output"

cam0_calib: "cam0.yaml"
cam1_calib: "cam1.yaml"
image_width: 640
image_height: 640

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.

extrinsic_type: 3 # 0 ALL
                  # 1 Only translation
                  # 2 Only Rotation
                  # 3 no z
                  # 4 no rotation and no z

#cam0 to body
body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [0, 0, -1, 0.05,
          -1, 0, 0, 0.04,
          0, 1, 0, 0.03,
          0, 0, 0, 1]
#   data: [0, 0, -1, 0.1,
#          -1, 0, 0, 0.09,
#          0, 1, 0, 0.07,
#          0, 0, 0, 1]
#cam1 to body
body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [0, 0, -1, 0,
          -1, 0, 0, 0,
          0, 1, 0, 0.3,
          0, 0, 0, 1]


# Extrinsic parameter between IMU and Camera.
estimate_wheel_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
  # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
# 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.

extrinsic_type_wheel: 3 # 0 ALL
                        # 1 Only translation
                        # 2 Only Rotation
                        # 3 no z
                        # 4 no rotation and no z
#wheel to body
body_T_wheel: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  data: [1, 0, 0, 0.023,
         0, 1, 0, 0.730,
         0, 0, 1, -0.248,
         0, 0, 0, 1]
#  data: [1, 0, 0, -0.0208,
#         0, 1, 0, 0.0290,
#         0, 0, 1, -0.0168,
#         0, 0, 0, 1]

#  data: [1, 0, 0, -0.0708,
#         0, 1, 0, 0.0790,
#         0, 0, 1, 0.0132,
#         0, 0, 0, 1]

#plane noise
roll_n: 0.01
pitch_n: 0.01
zpw_n: 0.005

#Multiple thread support
multiple_thread: 0

#feature traker paprameters
max_cnt: 36            # max feature number in feature tracking
min_dist: 30            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, turn on it. A circle mask will be loaded to remove edge noisy points


#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.019          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.015        # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.0001         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 1.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.805     # gravity magnitude

#wheel parameters
# rad/s
wheel_gyro_noise_sigma: 0.015
#　m/s
wheel_velocity_noise_sigma: 0.015

estimate_wheel_intrinsic: 0
# 0  Have an accurate intrinsic parameters. We will trust the following sx, sy, sw, don't change it.
# 1  Have an initial guess about intrinsic parameters. We will optimize around your initial guess.
# 2  TODO Don't know anything about intrinsic parameters. You don't need to give sx, sy, sw. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following sx, sy, sw.
# wheel intrinsic
sx: 1.2
sy: 1.2
sw: 1.2

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)
offset: 0.0
#unsynchronization parameters
estimate_td_wheel: 0                      # online estimate time offset between camera and wheel
td_wheel: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)
#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 1        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
